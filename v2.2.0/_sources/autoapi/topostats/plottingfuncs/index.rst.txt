topostats.plottingfuncs
=======================

.. py:module:: topostats.plottingfuncs

.. autoapi-nested-parse::

   Plotting data.

   ..
       !! processed by numpydoc !!


Attributes
----------

.. autoapisummary::

   topostats.plottingfuncs.LOGGER


Classes
-------

.. autoapisummary::

   topostats.plottingfuncs.Images


Functions
---------

.. autoapisummary::

   topostats.plottingfuncs.add_pixel_to_nm_to_plotting_config
   topostats.plottingfuncs.dilate_binary_image
   topostats.plottingfuncs.load_mplstyle
   topostats.plottingfuncs.add_bounding_boxes_to_plot
   topostats.plottingfuncs.set_n_ticks


Module Contents
---------------

.. py:data:: LOGGER

.. py:function:: add_pixel_to_nm_to_plotting_config(plotting_config: dict, pixel_to_nm_scaling: float) -> dict

   
   Add the pixel to nanometre scaling factor to plotting configs.

   Ensures plots are in nanometres and not pixels.

   :param plotting_config: TopoStats plotting configuration dictionary
   :type plotting_config: dict
   :param pixel_to_nm_scaling: Pixel to nanometre scaling factor for the image.
   :type pixel_to_nm_scaling: float

   :returns: **plotting_config** -- Updated plotting config with the pixel to nanometre scaling factor
             applied to all the image configurations.
   :rtype: dict















   ..
       !! processed by numpydoc !!

.. py:function:: dilate_binary_image(binary_image: numpy.ndarray, dilation_iterations: int) -> numpy.ndarray

   
   Dilate a supplied binary image a given number of times.

   :param binary_image: Binary image to be dilated
   :type binary_image: np.ndarray
   :param dilation_iterations: Number of dilation iterations to be performed
   :type dilation_iterations: int

   :returns: **binary_image** -- Dilated binary image
   :rtype: np.ndarray















   ..
       !! processed by numpydoc !!

.. py:function:: load_mplstyle(style: str | pathlib.Path) -> None

   
   Load the Matplotlibrc parameter file.

   :param style: Path to a Matplotlib Style file.
   :type style: str | Path

   :returns: Only loads the style file.
   :rtype: None















   ..
       !! processed by numpydoc !!

.. py:class:: Images(data: numpy.array, output_dir: str | pathlib.Path, filename: str, style: str | pathlib.Path = None, pixel_to_nm_scaling: float = 1.0, masked_array: numpy.array = None, title: str = None, image_type: str = 'non-binary', image_set: str = 'core', core_set: bool = False, pixel_interpolation: str | None = None, cmap: str | None = None, mask_cmap: str = 'jet_r', region_properties: dict = None, zrange: list = None, colorbar: bool = True, axes: bool = True, num_ticks: list[int | None, int | None] = (None, None), save: bool = True, savefig_format: str | None = None, histogram_log_axis: bool = True, histogram_bins: int | None = None, savefig_dpi: str | float | None = None)

   
   Plots image arrays.
















   ..
       !! processed by numpydoc !!

   .. py:attribute:: data


   .. py:attribute:: output_dir


   .. py:attribute:: filename


   .. py:attribute:: pixel_to_nm_scaling
      :value: 1.0



   .. py:attribute:: masked_array
      :value: None



   .. py:attribute:: title
      :value: None



   .. py:attribute:: image_type
      :value: 'non-binary'



   .. py:attribute:: image_set
      :value: 'core'



   .. py:attribute:: core_set
      :value: False



   .. py:attribute:: interpolation


   .. py:attribute:: cmap
      :value: None



   .. py:attribute:: mask_cmap
      :value: None



   .. py:attribute:: region_properties
      :value: None



   .. py:attribute:: zrange
      :value: None



   .. py:attribute:: colorbar
      :value: True



   .. py:attribute:: axes
      :value: True



   .. py:attribute:: num_ticks
      :value: (None, None)



   .. py:attribute:: save
      :value: True



   .. py:attribute:: savefig_format


   .. py:attribute:: histogram_log_axis
      :value: True



   .. py:attribute:: histogram_bins


   .. py:attribute:: savefig_dpi


   .. py:method:: plot_histogram_and_save()

      
      Plot and save a histogram of the height map.

      :returns: * **fig** (*plt.figure.Figure*) -- Matplotlib.pyplot figure object
                * **ax** (*plt.axes._subplots.AxesSubplot*) -- Matplotlib.pyplot axes object















      ..
          !! processed by numpydoc !!


   .. py:method:: plot_and_save()

      
      Plot and save the images with savefig or imsave depending on config file parameters.

      :returns: * **fig** (*plt.figure.Figure*) -- Matplotlib.pyplot figure object
                * **ax** (*plt.axes._subplots.AxesSubplot*) -- Matplotlib.pyplot axes object















      ..
          !! processed by numpydoc !!


   .. py:method:: save_figure()

      
      Save figures as plt.savefig objects.

      :returns: * **fig** (*plt.figure.Figure*) -- Matplotlib.pyplot figure object
                * **ax** (*plt.axes._subplots.AxesSubplot*) -- Matplotlib.pyplot axes object















      ..
          !! processed by numpydoc !!


   .. py:method:: save_array_figure() -> None

      
      Save the image array as an image using plt.imsave().
















      ..
          !! processed by numpydoc !!


.. py:function:: add_bounding_boxes_to_plot(fig, ax, shape, region_properties: list, pixel_to_nm_scaling: float) -> None

   
   Add the bounding boxes to a plot.

   :param fig: Matplotlib.pyplot figure object
   :type fig: plt.figure.Figure
   :param ax: Matplotlib.pyplot axes object
   :type ax: plt.axes._subplots.AxesSubplot.
   :param shape: Tuple of the image-to-be-plot's shape.
   :type shape: tuple
   :param region_properties: Region properties to add bounding boxes from.
   :param pixel_to_nm_scaling: The scaling factor from px to nm.
   :type pixel_to_nm_scaling: float

   :returns: * **fig** (*plt.figure.Figure*) -- Matplotlib.pyplot figure object.
             * **ax** (*plt.axes._subplots.AxesSubplot*) -- Matplotlib.pyplot axes object.















   ..
       !! processed by numpydoc !!

.. py:function:: set_n_ticks(ax: matplotlib.pyplot.Axes.axes, n_xy: list[int | None, int | None]) -> None

   
   Set the number of ticks along the y and x axes and lets matplotlib assign the values.

   :param ax: The axes to add ticks to.
   :type ax: plt.Axes.axes
   :param n_xy: The number of ticks.
   :type n_xy: list[int, int]

   :returns: The axes with the new ticks.
   :rtype: plt.Axes.axes















   ..
       !! processed by numpydoc !!

