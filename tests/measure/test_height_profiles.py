"""Tests for height profiles."""

from __future__ import annotations

import sys

import numpy as np
import numpy.typing as npt
import pytest

from topostats.measure import height_profiles

# pylint: disable=too-many-lines


@pytest.mark.parametrize(
    ("img", "skeleton", "interpolate_conf", "target"),
    [
        pytest.param(
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
            {"method": "linear"},
            np.asarray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
            id="Basic circle, interpolation : linear",
        ),
        pytest.param(
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
            {"method": "linear"},
            np.asarray([6, 7, 8, 9, 10, 9, 8, 7, 6]),
            id="Diagonal line, interpolation : linear",
        ),
        pytest.param(
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
            {"method": "cubic"},
            np.asarray(
                [
                    6.00003876621563,
                    7.000004717194621,
                    7.9999928244616285,
                    8.99999298402839,
                    9.999970980789172,
                    8.999992984028388,
                    7.999992824461623,
                    7.000004717194617,
                    6.0000387662156305,
                ]
            ),
            id="Diagonal line, interpolation : cubic",
        ),
    ],
)
def test_interpolate_height_profile_basic(
    img: npt.NDArray, skeleton: npt.NDArray, interpolate_conf: dict, target: npt.NDArray
) -> None:
    """Test interpolate_height_profile() with basic shapes and heights."""
    np.testing.assert_array_almost_equal(
        height_profiles.interpolate_height_profile(img, skeleton, **interpolate_conf), target, decimal=12
    )


@pytest.mark.skipif(sys.platform.startswith("win"), reason="Different results interpolating on Windows, unclear why.")
@pytest.mark.parametrize(
    ("img", "interpolate_conf", "target"),
    [
        pytest.param(
            "skeleton_loop1",
            {"method": "linear"},
            np.asarray(
                [
                    4.67065435e-19,
                    5.27325236e-19,
                    5.73001876e-19,
                    6.00077154e-19,
                    6.02620717e-19,
                    5.84638629e-19,
                    5.49900643e-19,
                    5.01019148e-19,
                    4.44454025e-19,
                    3.84704618e-19,
                    3.24727212e-19,
                    2.71579881e-19,
                    2.24030707e-19,
                    1.82928477e-19,
                    1.52009449e-19,
                    1.29002796e-19,
                    1.12210549e-19,
                    1.02377000e-19,
                    9.88337895e-20,
                    9.86897569e-20,
                    1.01606876e-19,
                    1.08936285e-19,
                    1.18189308e-19,
                    1.29587354e-19,
                    1.45118712e-19,
                    1.64343073e-19,
                    1.87514816e-19,
                    2.16107520e-19,
                    2.50541210e-19,
                    2.89309484e-19,
                    3.31579050e-19,
                    3.77100234e-19,
                    4.22750106e-19,
                    4.67427278e-19,
                    5.12015950e-19,
                    5.56562119e-19,
                    6.02714720e-19,
                    6.52632142e-19,
                    7.06722254e-19,
                    7.64764648e-19,
                    8.24194642e-19,
                    8.77655946e-19,
                    9.22918373e-19,
                    9.55310478e-19,
                    9.68676402e-19,
                    9.65855291e-19,
                    9.48983887e-19,
                    9.21105154e-19,
                    8.88051609e-19,
                    8.54278066e-19,
                    8.23290173e-19,
                    7.97837145e-19,
                    7.78036698e-19,
                    7.64027816e-19,
                    7.54952213e-19,
                    7.49473349e-19,
                    7.46876370e-19,
                    7.45973399e-19,
                    7.45904036e-19,
                    7.46705469e-19,
                    7.48013031e-19,
                    7.49133335e-19,
                    7.50512257e-19,
                    7.51909422e-19,
                    7.52391803e-19,
                    7.51626216e-19,
                    7.48594362e-19,
                    7.41889223e-19,
                    7.30464673e-19,
                    7.12964755e-19,
                    6.88595014e-19,
                    6.58882186e-19,
                    6.22972271e-19,
                    5.81557780e-19,
                    5.40406540e-19,
                    4.97897592e-19,
                    4.55159488e-19,
                    4.16411088e-19,
                    3.81464749e-19,
                    3.49043423e-19,
                    3.21295477e-19,
                    3.00311339e-19,
                    2.84251853e-19,
                    2.75044356e-19,
                    2.77171887e-19,
                    2.90484914e-19,
                    3.17730359e-19,
                    3.62941157e-19,
                    4.27182722e-19,
                    5.09548575e-19,
                    6.08585652e-19,
                    7.20418643e-19,
                    8.35361178e-19,
                    9.44196778e-19,
                    1.03821903e-18,
                    1.10607841e-18,
                    1.14204135e-18,
                    1.14240973e-18,
                    1.10717643e-18,
                    1.04225817e-18,
                    9.53125935e-19,
                    8.44475011e-19,
                    7.27831261e-19,
                    6.10118898e-19,
                ]
            ),
            id="Skeleton loop 1",
            # marks=pytest.mark.skip(),
        ),
        pytest.param(
            "skeleton_loop2",
            {"method": "linear"},
            np.asarray([4.40393772e-19, 2.04340231e-19, 4.34636982e-19]),
            id="Skeleton loop 2",
            marks=pytest.mark.skip(reason="Looks weird, expect more than three points."),
        ),
        pytest.param(
            "skeleton_linear3",
            {"method": "linear"},
            np.asarray(
                [
                    4.60623136e-19,
                    5.10302665e-19,
                    5.37095486e-19,
                    5.37165591e-19,
                    5.10075873e-19,
                    4.58990375e-19,
                    3.92579809e-19,
                    3.19427408e-19,
                    2.46754846e-19,
                    1.80615293e-19,
                    1.27149020e-19,
                    8.58026832e-20,
                    5.56100490e-20,
                    3.52552496e-20,
                    2.32366177e-20,
                    1.81760266e-20,
                    1.76398399e-20,
                    2.07214078e-20,
                    2.66782218e-20,
                    3.59301348e-20,
                    4.79535313e-20,
                    6.15538262e-20,
                    7.59615427e-20,
                    9.06585187e-20,
                    1.07280567e-19,
                    1.23941969e-19,
                    1.41789438e-19,
                    1.63283229e-19,
                    1.93542424e-19,
                    2.38155898e-19,
                    3.00928079e-19,
                    3.86080676e-19,
                    4.95454001e-19,
                    6.28051594e-19,
                    7.73088313e-19,
                    9.17635389e-19,
                    1.04659862e-18,
                    1.14401194e-18,
                    1.19613838e-18,
                    1.20151215e-18,
                    1.16362278e-18,
                    1.09164268e-18,
                    9.98631761e-19,
                    8.99456795e-19,
                    8.04297034e-19,
                    7.19380362e-19,
                    6.47489041e-19,
                    5.89873525e-19,
                    5.40925921e-19,
                    4.97410584e-19,
                    4.56471131e-19,
                    4.16658215e-19,
                    3.76537601e-19,
                    3.35352015e-19,
                    2.93957893e-19,
                    2.53511995e-19,
                    2.15748369e-19,
                    1.81398395e-19,
                    1.51714946e-19,
                    1.27775160e-19,
                    1.10442752e-19,
                    1.00520565e-19,
                    9.82528292e-20,
                    1.04083463e-19,
                    1.18546517e-19,
                    1.42786089e-19,
                    1.77983378e-19,
                    2.25405257e-19,
                    2.86182615e-19,
                    3.60671679e-19,
                    4.47865755e-19,
                    5.43429420e-19,
                    6.41590773e-19,
                    7.35104148e-19,
                    8.16529727e-19,
                    8.79666645e-19,
                    9.21252909e-19,
                    9.41628849e-19,
                    9.44526855e-19,
                    9.34636518e-19,
                    9.18033824e-19,
                    8.99737937e-19,
                    8.82842133e-19,
                    8.66510367e-19,
                    8.47388128e-19,
                    8.27092889e-19,
                    8.05502825e-19,
                    7.83381220e-19,
                    7.59121805e-19,
                    7.38876243e-19,
                    7.26220278e-19,
                    7.22418772e-19,
                    7.26808537e-19,
                    7.36069916e-19,
                    7.48213880e-19,
                    7.58164506e-19,
                    7.60680300e-19,
                    7.48834881e-19,
                    7.18989781e-19,
                    6.71276589e-19,
                    6.06946427e-19,
                    5.29400316e-19,
                ]
            ),
            id="Linear skeleton 3, row 81",
        ),
    ],
)
def test_interpolate_height_profile_images(img: dict, interpolate_conf: dict, target: npt.NDArray, request) -> None:
    """Test interpolate_height_profile() with more realistic images."""
    _img = request.getfixturevalue(img)
    interpolated_heights = height_profiles.interpolate_height_profile(_img["img"], _img["skeleton"], **interpolate_conf)
    np.testing.assert_array_almost_equal(interpolated_heights, target, decimal=12)
