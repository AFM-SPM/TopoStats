"""Tests for tracedna sub-module"""
import numpy as np
import pytest

# from topostats.tracing.skeletonize import getSkeleton
from topostats.tracing.tracedna import traceDNA

# pylint: disable=protected-access
# pylint: disable=too-many-lines

GRAINS = {}
GRAINS["vertical"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)
GRAINS["horizontal"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)
GRAINS["diagonal"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)
GRAINS["circle"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)


@pytest.mark.parametrize(
    "grain, iterations, expected",
    [
        (
            GRAINS["vertical"],
            2,
            np.asarray(
                [
                    [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["horizontal"],
            2,
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["diagonal"],
            2,
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["circle"],
            2,
            np.asarray(
                [
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                ]
            ),
        ),
    ],
)
def test_dilate(tracedna, grain, iterations, expected):
    """Test dilation"""
    dilated = tracedna._dilate(grain, iterations)
    np.testing.assert_array_equal(dilated, expected)


@pytest.mark.parametrize(
    "grain, sigma, expected",
    [
        (
            GRAINS["vertical"] * 10,
            1,
            np.asarray(
                [
                    [0, 0, 0, 2, 2, 2, 0, 0, 0, 0],
                    [0, 0, 2, 4, 6, 4, 2, 0, 0, 0],
                    [0, 0, 2, 6, 7, 6, 2, 0, 0, 0],
                    [0, 0, 2, 6, 7, 6, 2, 0, 0, 0],
                    [0, 0, 2, 6, 7, 6, 2, 0, 0, 0],
                    [0, 0, 2, 6, 7, 6, 2, 0, 0, 0],
                    [0, 0, 2, 6, 7, 6, 2, 0, 0, 0],
                    [0, 0, 2, 6, 7, 6, 2, 0, 0, 0],
                    [0, 0, 2, 4, 6, 4, 2, 0, 0, 0],
                    [0, 0, 0, 2, 2, 2, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["horizontal"] * 10,
            2,
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 2, 2, 2, 2, 2, 2, 2, 2, 1],
                    [3, 3, 4, 4, 4, 4, 4, 4, 3, 3],
                    [3, 4, 4, 5, 5, 5, 5, 4, 4, 3],
                    [3, 4, 4, 5, 5, 5, 5, 4, 4, 3],
                    [3, 3, 4, 4, 4, 4, 4, 4, 3, 3],
                    [1, 2, 2, 2, 2, 2, 2, 2, 2, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["diagonal"] * 10,
            2,
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 1, 1],
                    [0, 0, 0, 0, 1, 2, 3, 3, 3, 2, 2, 1],
                    [0, 0, 0, 1, 2, 3, 4, 4, 4, 3, 2, 1],
                    [0, 0, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1],
                    [0, 1, 2, 3, 4, 5, 5, 5, 4, 3, 1, 1],
                    [1, 1, 3, 4, 5, 5, 5, 4, 3, 2, 1, 0],
                    [1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 0, 0],
                    [1, 2, 3, 4, 4, 4, 3, 2, 1, 0, 0, 0],
                    [1, 2, 2, 3, 3, 3, 2, 1, 0, 0, 0, 0],
                    [1, 1, 1, 2, 2, 1, 1, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["circle"] * 10,
            2,
            np.asarray(
                [
                    [0, 0, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0],
                    [0, 1, 1, 2, 2, 2, 3, 2, 2, 2, 1, 1, 0],
                    [1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1],
                    [1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1],
                    [2, 2, 3, 4, 4, 3, 3, 3, 4, 4, 3, 2, 2],
                    [2, 3, 3, 4, 3, 3, 3, 3, 3, 4, 3, 3, 2],
                    [2, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 2],
                    [2, 3, 3, 4, 3, 3, 3, 3, 3, 4, 3, 3, 2],
                    [2, 2, 3, 4, 4, 3, 3, 3, 4, 4, 3, 2, 2],
                    [1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1],
                    [1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1],
                    [0, 1, 1, 2, 2, 2, 3, 2, 2, 2, 1, 1, 0],
                    [0, 0, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0],
                ]
            ),
        ),
    ],
)
def test_gaussian_filter(tracedna, grain, sigma, expected):
    """Test Gaussian Filter."""
    gaussian_filtered = tracedna._gaussian_filter(grain, sigma)
    np.testing.assert_array_equal(gaussian_filtered, expected)


@pytest.mark.parametrize(
    "grain, iterations, method, expected",
    [
        (
            GRAINS["vertical"],
            2,
            "zhang",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["horizontal"],
            2,
            "zhang",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ],
            ),
        ),
        (
            GRAINS["diagonal"],
            2,
            "zhang",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["circle"],
            2,
            "zhang",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
    ],
)
def test_tracedna_zhang(tracedna, grain, iterations, method, expected):
    """Test skeletonisation."""
    tracedna.grain["dilated"] = tracedna._dilate(grain, iterations)
    tracedna.grain["mask"] = grain
    tracedna.skeletonisation_method = method
    tracedna.skeletonize()

    np.testing.assert_array_equal(tracedna.grain["skeleton"], expected)


@pytest.mark.parametrize(
    "grain, iterations, method, expected",
    [
        (
            GRAINS["vertical"],
            2,
            "lee",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["horizontal"],
            2,
            "lee",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ],
            ),
        ),
        (
            GRAINS["diagonal"],
            2,
            "lee",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["circle"],
            2,
            "lee",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
    ],
)
def test_tracedna_lee(tracedna, grain, iterations, method, expected):
    """Test skeletonisation."""
    tracedna.grain["dilated"] = tracedna._dilate(grain, iterations)
    tracedna.grain["mask"] = grain
    tracedna.skeletonisation_method = method
    tracedna.skeletonize()

    np.testing.assert_array_equal(tracedna.grain["skeleton"], expected)


@pytest.mark.parametrize(
    "grain, iterations, method, expected",
    [
        (
            GRAINS["vertical"],
            2,
            "medial_axis",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        # (
        #     GRAINS["horizontal"],
        #     2,
        #     "medial_axis",
        #     np.asarray(
        #         [
        #             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #             [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
        #             [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
        #             [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
        #             [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
        #             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #         ]
        #     ),
        # ),
        (
            GRAINS["diagonal"],
            2,
            "medial_axis",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        # (
        #     GRAINS["circle"],
        #     2,
        #     "medial_axis",
        #     np.asarray(
        #         [
        #             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #             [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        #             [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
        #             [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
        #             [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
        #             [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
        #             [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
        #             [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
        #             [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0],
        #             [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0],
        #             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #         ]
        #     ),
        # ),
    ],
)
def test_tracedna_medial_axis(tracedna, grain, iterations, method, expected):
    """Test skeletonisation."""
    tracedna.grain["dilated"] = tracedna._dilate(grain, iterations)
    tracedna.grain["mask"] = grain
    tracedna.skeletonisation_method = method
    tracedna.skeletonize()
    print(f"tracedna.grain['skeleton'] :\n{tracedna.grain['skeleton']}")
    np.testing.assert_array_equal(tracedna.grain["skeleton"], expected)


@pytest.mark.parametrize(
    "grain, iterations, method, expected",
    [
        (
            GRAINS["vertical"],
            2,
            "thin",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["horizontal"],
            2,
            "thin",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["diagonal"],
            2,
            "thin",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            GRAINS["circle"],
            2,
            "thin",
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
    ],
)
def test_tracedna_thin(tracedna, grain, iterations, method, expected):
    """Test skeletonisation."""
    tracedna.grain["dilated"] = tracedna._dilate(grain, iterations)
    tracedna.grain["mask"] = grain
    tracedna.skeletonisation_method = method
    tracedna.skeletonize()
    np.testing.assert_array_equal(tracedna.grain["skeleton"], expected)


ADJACENT_GRAINS = {}
ADJACENT_GRAINS["vertical"] = np.asarray(
    [
        [0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["horizontal"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["diagonal1"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["diagonal2"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["diagonal3"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["circle"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
        [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0],
        [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["blob"] = np.asarray(
    [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 1, 1, 1, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["cross"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["single_L"] = np.asarray(
    [
        [0, 0, 0, 0],
        [0, 0, 1, 0],
        [0, 0, 1, 0],
        [0, 0, 1, 0],
        [0, 1, 1, 0],
        [0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["double_L"] = np.asarray(
    [
        [0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0],
        [0, 0, 1, 1, 0],
        [0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0],
    ]
)

ADJACENT_GRAINS["diagonal_end_single_L"] = np.asarray(
    [
        [0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["diagonal_end_straight"] = np.asarray(
    [
        [0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["figure8"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 0, 0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["three_ends"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1, 0],
        [0, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)
ADJACENT_GRAINS["six_ends"] = np.asarray(
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1, 0],
        [0, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
)


@pytest.mark.parametrize(
    "binary_array,expected_all,expected_abscissa_ordinate",
    [
        (
            ADJACENT_GRAINS["vertical"],
            np.asarray(
                [
                    [0, 1, 1, 1, 0],
                    [0, 2, 1, 2, 0],
                    [0, 3, 2, 3, 0],
                    [0, 3, 2, 3, 0],
                    [0, 3, 2, 3, 0],
                    [0, 3, 2, 3, 0],
                    [0, 3, 2, 3, 0],
                    [0, 3, 2, 3, 0],
                    [0, 2, 1, 2, 0],
                    [0, 1, 1, 1, 0],
                ]
            ),
            np.asarray(
                [
                    [0, 0, 1, 0, 0],
                    [0, 1, 1, 1, 0],
                    [0, 1, 2, 1, 0],
                    [0, 1, 2, 1, 0],
                    [0, 1, 2, 1, 0],
                    [0, 1, 2, 1, 0],
                    [0, 1, 2, 1, 0],
                    [0, 1, 2, 1, 0],
                    [0, 1, 1, 1, 0],
                    [0, 0, 1, 0, 0],
                ]
            ),
        ),
        (
            ADJACENT_GRAINS["horizontal"],
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 2, 3, 3, 3, 3, 3, 3, 2, 1],
                    [1, 1, 2, 2, 2, 2, 2, 2, 1, 1],
                    [1, 2, 3, 3, 3, 3, 3, 3, 2, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [1, 1, 2, 2, 2, 2, 2, 2, 1, 1],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (  # NB - This is actually problematic as the "kinks" at the end when masked results in no ends with 1
            ADJACENT_GRAINS["diagonal1"],
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 1, 1, 1],
                    [0, 0, 0, 0, 0, 1, 3, 2, 2],
                    [0, 0, 0, 0, 0, 2, 3, 3, 2],
                    [0, 0, 0, 1, 2, 5, 4, 4, 1],
                    [0, 0, 1, 3, 3, 4, 2, 2, 0],
                    [0, 1, 3, 4, 4, 4, 2, 1, 0],
                    [1, 3, 4, 4, 3, 1, 0, 0, 0],
                    [2, 3, 4, 3, 1, 0, 0, 0, 0],
                    [2, 2, 3, 1, 0, 0, 0, 0, 0],
                    [1, 1, 1, 0, 0, 0, 0, 0, 0],
                ]
            ),
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 2, 1, 1],
                    [0, 0, 0, 0, 0, 1, 2, 2, 1],
                    [0, 0, 0, 0, 1, 2, 2, 2, 0],
                    [0, 0, 0, 2, 2, 2, 2, 1, 0],
                    [0, 0, 2, 2, 2, 2, 1, 0, 0],
                    [0, 2, 2, 2, 2, 0, 0, 0, 0],
                    [1, 2, 2, 2, 0, 0, 0, 0, 0],
                    [1, 1, 2, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (  # NB - Ends after masking are both 1
            ADJACENT_GRAINS["diagonal2"],
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 1],
                    [0, 0, 0, 0, 0, 1, 3, 3, 3, 1, 1],
                    [0, 0, 0, 0, 0, 2, 3, 4, 4, 2, 1],
                    [0, 0, 0, 1, 2, 5, 4, 4, 1, 0, 0],
                    [0, 0, 1, 3, 3, 4, 2, 2, 0, 0, 0],
                    [0, 1, 3, 4, 4, 4, 2, 1, 0, 0, 0],
                    [1, 3, 4, 4, 3, 1, 0, 0, 0, 0, 0],
                    [2, 3, 4, 3, 1, 0, 0, 0, 0, 0, 0],
                    [3, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0],
                    [2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 1],
                    [0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0],
                    [0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0],
                    [0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 0],
                    [0, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0],
                    [0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0],
                    [1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0],
                    [1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (  # NB - Both ends are diagonals, no kinks
            ADJACENT_GRAINS["diagonal3"],
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 1, 1, 1],
                    [0, 0, 0, 0, 0, 1, 2, 1, 1],
                    [0, 0, 0, 0, 0, 2, 2, 3, 1],
                    [0, 0, 0, 1, 2, 5, 3, 3, 0],
                    [0, 0, 1, 3, 3, 4, 2, 2, 0],
                    [0, 1, 3, 4, 4, 4, 2, 1, 0],
                    [0, 2, 3, 4, 3, 1, 0, 0, 0],
                    [1, 3, 3, 3, 1, 0, 0, 0, 0],
                    [1, 1, 2, 1, 0, 0, 0, 0, 0],
                    [1, 1, 1, 0, 0, 0, 0, 0, 0],
                ]
            ),
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 2, 0, 1],
                    [0, 0, 0, 0, 0, 1, 1, 2, 0],
                    [0, 0, 0, 0, 1, 2, 2, 1, 0],
                    [0, 0, 0, 2, 2, 2, 2, 1, 0],
                    [0, 0, 2, 2, 2, 2, 1, 0, 0],
                    [0, 1, 2, 2, 2, 0, 0, 0, 0],
                    [0, 2, 1, 2, 0, 0, 0, 0, 0],
                    [1, 0, 2, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
        ),
        (
            ADJACENT_GRAINS["circle"],
            np.asarray(
                [
                    [0, 1, 2, 3, 3, 3, 3, 3, 2, 1, 0],
                    [1, 3, 3, 3, 2, 2, 2, 3, 3, 3, 1],
                    [2, 3, 4, 4, 3, 3, 3, 4, 4, 3, 2],
                    [3, 3, 4, 1, 0, 0, 0, 1, 4, 3, 3],
                    [3, 2, 3, 0, 0, 0, 0, 0, 3, 2, 3],
                    [3, 2, 3, 0, 0, 0, 0, 0, 3, 2, 3],
                    [3, 2, 3, 0, 0, 0, 0, 0, 3, 2, 3],
                    [3, 3, 4, 1, 0, 0, 0, 1, 4, 3, 3],
                    [2, 3, 4, 4, 3, 3, 3, 4, 4, 3, 2],
                    [1, 3, 3, 3, 2, 2, 2, 3, 3, 3, 1],
                    [0, 1, 2, 3, 3, 3, 3, 3, 2, 1, 0],
                ]
            ),
            np.asarray(
                [
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                    [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
                    [1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1],
                    [1, 2, 2, 0, 0, 0, 0, 0, 2, 2, 1],
                    [1, 2, 1, 0, 0, 0, 0, 0, 1, 2, 1],
                    [1, 2, 1, 0, 0, 0, 0, 0, 1, 2, 1],
                    [1, 2, 1, 0, 0, 0, 0, 0, 1, 2, 1],
                    [1, 2, 2, 0, 0, 0, 0, 0, 2, 2, 1],
                    [1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1],
                    [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
                    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                ]
            ),
        ),
        (
            ADJACENT_GRAINS["blob"],
            np.asarray(
                [
                    [1, 2, 3, 2, 1],
                    [2, 3, 5, 3, 2],
                    [3, 5, 8, 5, 3],
                    [2, 3, 5, 3, 2],
                    [1, 2, 3, 2, 1],
                ]
            ),
            np.asarray([[0, 1, 1, 1, 0], [1, 2, 3, 2, 1], [1, 3, 4, 3, 1], [1, 2, 3, 2, 1], [0, 1, 1, 1, 0]]),
        ),
        (
            ADJACENT_GRAINS["cross"],
            np.asarray(
                [
                    [0, 0, 1, 1, 1, 0, 0],
                    [0, 0, 2, 1, 2, 0, 0],
                    [1, 2, 5, 4, 5, 2, 1],
                    [1, 1, 4, 4, 4, 1, 1],
                    [1, 2, 5, 4, 5, 2, 1],
                    [0, 0, 2, 1, 2, 0, 0],
                    [0, 0, 1, 1, 1, 0, 0],
                ]
            ),
            np.asarray(
                [
                    [0, 0, 0, 1, 0, 0, 0],
                    [0, 0, 1, 1, 1, 0, 0],
                    [0, 1, 2, 2, 2, 1, 0],
                    [1, 1, 2, 4, 2, 1, 1],
                    [0, 1, 2, 2, 2, 1, 0],
                    [0, 0, 1, 1, 1, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0],
                ]
            ),
        ),
    ],
)
def test_count_adjacent(
    tracedna: traceDNA, binary_array: np.ndarray, expected_all: np.ndarray, expected_abscissa_ordinate: np.ndarray
) -> None:
    """Test counts of non-zero adjacent cells"""
    tracedna.grain["skeleton"] = binary_array
    tracedna._inverse_mask()
    tracedna._count_adjacent()
    np.testing.assert_array_equal(tracedna.grain["adjacent"], expected_all)
    np.testing.assert_array_equal(tracedna.grain["adjacent_abscissa_ordinate"], expected_abscissa_ordinate)


@pytest.mark.parametrize(
    "binary_array,expected",
    [
        (
            ADJACENT_GRAINS["vertical"],
            np.asarray(
                [
                    [1, 1, 1, 1, 1],
                    [1, 1, 0, 1, 1],
                    [1, 1, 0, 1, 1],
                    [1, 1, 0, 1, 1],
                    [1, 1, 0, 1, 1],
                    [1, 1, 0, 1, 1],
                    [1, 1, 0, 1, 1],
                    [1, 1, 0, 1, 1],
                    [1, 1, 0, 1, 1],
                    [1, 1, 1, 1, 1],
                ]
            ),
        ),
        (
            ADJACENT_GRAINS["horizontal"],
            np.asarray(
                [
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                ]
            ),
        ),
        (  # NB - This is actually problematic as when masked there are no ends with 1
            ADJACENT_GRAINS["diagonal1"],
            np.asarray(
                [
                    [1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 0, 1],
                    [1, 1, 1, 1, 1, 1, 0, 0, 1],
                    [1, 1, 1, 1, 1, 1, 0, 1, 1],
                    [1, 1, 1, 1, 0, 0, 0, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1, 1],
                    [1, 1, 0, 0, 1, 1, 1, 1, 1],
                    [1, 0, 0, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1],
                ]
            ),
        ),
        (
            ADJACENT_GRAINS["diagonal2"],
            np.asarray(
                [
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
                    [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1],
                    [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1],
                    [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1],
                    [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                ]
            ),
        ),
        (
            ADJACENT_GRAINS["circle"],
            np.asarray(
                [
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                    [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1],
                    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                    [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1],
                    [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                ]
            ),
        ),
        (
            ADJACENT_GRAINS["blob"],
            np.asarray([[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]]),
        ),
        (
            ADJACENT_GRAINS["cross"],
            np.asarray(
                [
                    [1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 0, 1, 1, 1],
                    [1, 1, 1, 0, 1, 1, 1],
                    [1, 0, 0, 0, 0, 0, 1],
                    [1, 1, 1, 0, 1, 1, 1],
                    [1, 1, 1, 0, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1],
                ]
            ),
        ),
    ],
)
def test_inverse_mask(tracedna: traceDNA, binary_array: np.ndarray, expected: np.ndarray) -> None:
    """Test inverse array for a skeleton."""
    tracedna.grain["skeleton"] = binary_array
    tracedna._inverse_mask()
    np.testing.assert_array_equal(tracedna.grain["skeleton_inverse_mask"], expected)


@pytest.mark.parametrize(
    "binary_array,expected",
    [
        (ADJACENT_GRAINS["single_L"], 2),
        (ADJACENT_GRAINS["double_L"], 2),
        (ADJACENT_GRAINS["diagonal_end_single_L"], 2),
        (ADJACENT_GRAINS["diagonal_end_straight"], 2),
        (ADJACENT_GRAINS["vertical"], 2),
        (ADJACENT_GRAINS["horizontal"], 2),
        (ADJACENT_GRAINS["diagonal1"], 2),
        (ADJACENT_GRAINS["diagonal2"], 2),
        (ADJACENT_GRAINS["diagonal3"], 2),
        (ADJACENT_GRAINS["circle"], 0),
        (ADJACENT_GRAINS["blob"], 0),
    ],
)
def test_count_ends(tracedna: traceDNA, binary_array: np.ndarray, expected: np.ndarray) -> None:
    """Test counting of ends."""
    tracedna.grain["skeleton"] = binary_array
    tracedna._inverse_mask()
    tracedna._count_adjacent()
    tracedna._count_ends()
    assert tracedna.ends == expected


@pytest.mark.parametrize(
    "binary_array,expected",
    [
        (ADJACENT_GRAINS["cross"], 4),
        (ADJACENT_GRAINS["three_ends"], 3),
        (ADJACENT_GRAINS["six_ends"], 6),
    ],
)
def test_count_ends_unusual(tracedna: traceDNA, binary_array: np.ndarray, expected: np.ndarray, caplog) -> None:
    """Test counting of ends with unusual, possibly branched skeletons."""
    tracedna.grain["skeleton"] = binary_array
    tracedna._inverse_mask()
    tracedna._count_adjacent()
    tracedna._count_ends()
    assert tracedna.ends == expected
    assert f"There is something weird about this skeleton! It has {expected} ends" in caplog.text
